{% extends 'cvm_page_v1.html' %}

{% block style%}
<link rel="stylesheet" href="/static/css/repository.css" />
{%endblock%}
{% block description%}
<div>

    <h3>CVM Repository</h3>
    <p>
        Welcome to the repository for the CRESCENT Community Velocity Models (CVM). This platform is dedicated to
        facilitating access to a wide array of community velocity models developed as part of the CRESCENT project.
        CVM-Web
        offers advanced visualization tools for model previews, capabilities for extracting model data and metadata, and
        access to a variety of contributed processing software and scripts. This resource is designed to support
        CRESCENT
        researchers in creating, exploring, analyzing, and utilizing velocity models effectively.
    </p>
    <p>
        To explore the repository, click on any of the available models listed below. Detailed information about your
        selection, including area coverage and associated metadata, will be displayed on the right-hand side of the
        interface.
    </p>
</div>
{%endblock%}
{% block leftpanel%}
<div id="fileListPanel">
    <div id="fileTable"></div>
</div>
{%endblock%}
{%block rightpanel%}
<div id="contentPanel">
    <br /><span id="cmodelname"></span> coverage &amp; CRESCENT Cascadia fault traces
    <div id="map"></div>
    <div><br /><span id="mmodelname"></span> Metadata
        <pre id="jsonContent"></pre>
    </div>
</div>
{%endblock%}
{%block scripts %}
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
    // Function to draw bounding box on the Leaflet map
    function drawBoundingBox(map, corner1, corner2) {
        const bounds = [corner1, corner2];
        L.rectangle(bounds, { color: "#ff7800", weight: 1 }).addTo(map);
        map.fitBounds(bounds);
    }

    // Function to calculate zoom level for a given bounding box
    function calculateZoomLevel(map, corner1, corner2) {
        const bounds = L.latLngBounds(corner1, corner2);
        return map.getBoundsZoom(bounds);
    }

    /**
     * Generates HTML content from a given JSON object, handling nested structures recursively.
     * 
     * @param {Object} jsonData - The JSON object to be converted into HTML.
     * @returns {string} - The generated HTML content as a string.
     */
    function createHtmlFromJson(jsonData) {
        /**
         * Recursively processes JSON data to generate HTML content.
         * 
         * @param {Object} jsonData - The current level of the JSON object to be processed.
         * @returns {string} - The HTML content for the current level of the JSON object.
         */
        function processJson(jsonData) {
            let htmlContent = '<div class="json-container">';
            for (let key in jsonData) {
                if (typeof jsonData[key] === 'object' && jsonData[key] !== null) {
                    htmlContent += `<div><b>${key}:</b>${processJson(jsonData[key])}</div>`;
                } else {
                    htmlContent += `<div><b>${key}:</b> ${jsonData[key]}</div>`;
                }
            }
            htmlContent += '</div>';
            return htmlContent;
        }

        return processJson(jsonData);
    }



    // Function to fetch the CGI script output and inject it into the <div>
    function loadFileListAndJSON() {

        var count = 0;
        // (39, -130), (39, -116), (52, -130), (52, -116)
        let proj_lat_min = 39;
        let proj_lat_max = 52;
        let proj_lon_min = -130;
        let proj_lon_max = -116;
        let lat_min = 39;
        let lat_max = 52;
        let lon_min = -130;
        let lon_max = -116;
        let model = "-";
        let summary = "-";
        let filename = "-";
        // Initialize Leaflet map
        var init_map_zoom_level = 8;
        // Initialize an empty bounding box
        var boundingBox = null;


        const map = L.map('map').setView([45.5, -123.0], init_map_zoom_level);
        const zoomLevel = calculateZoomLevel(map, L.latLng(proj_lat_min, proj_lon_min), L.latLng(proj_lat_max, proj_lon_max)) * 0.85;
        map.setZoom(zoomLevel);
        var Esri_WorldTopoMap = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}', {
            attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'
        });
        Esri_WorldTopoMap.addTo(map);
        // Load GeoJSON data
        fetch('https://raw.githubusercontent.com/cascadiaquakes/crescent-cfm/main/crescent_cfm_files/crescent_cfm_crustal_traces.geojson')
            .then(response => response.json())
            .then(data => {
                // Add 3D GeoJSON layer to the map
                L.geoJSON(data, {
                    renderer: L.canvas(),
                    style: {
                        color: 'black',
                        opacity: 1.0,
                        weight: 0.8,  // Adjust line width here
                    },
                    onEachFeature: function (feature, layer) {
                        if (feature.properties && feature.properties.popupContent) {
                            layer.bindPopup(feature.properties.popupContent);
                        }
                    }
                }).addTo(map);
            })
            .catch(error => console.error('Error loading GeoJSON:', error));

        // Function to update bounding box
        function updateBoundingBox(lat_min, lon_min, lat_max, lon_max) {

            if (boundingBox) {
                // Remove existing bounding box if present
                map.removeLayer(boundingBox);
            }
            // Calculate new bounding box coordinates based on lat and lng
            var bounds = L.latLngBounds([
                [lat_min, lon_min],
                [lat_max, lon_max]
            ]);
            // Draw the new bounding box
            boundingBox = L.rectangle(bounds, { color: "#ff7800", weight: 1 }).addTo(map);
        }

        function hideAllRadioButtonsExceptChecked() {
            const radios = fileTable.querySelectorAll('input[type="radio"]');
            radios.forEach(radio => {
                if (radio.checked) {
                    radio.disabled = false; // Make sure it's enabled
                    radio.parentNode.style.opacity = 1; // Full opacity for checked
                    radio.parentNode.style.backgroundColor = ''; // Reset background if needed
                } else {
                    radio.disabled = true; // Disable the radio
                    radio.parentNode.style.opacity = 0.5; // Lower opacity for unchecked
                    radio.parentNode.style.backgroundColor = 'white'; // Apply a background color
                }
            });
        }

        fetch('/vis/list_json_files') // Replace with the URL to your CGI script
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text(); // Assuming CGI script returns HTML
            })
            .then(html => {

                // Inject the received HTML into the fileTable div
                fileTable.innerHTML = html;
                var firstFileName = fileTable.querySelector('tr:nth-child(2) td:nth-child(8)').textContent.trim();
                var firstFilePath = '../static/json/' + firstFileName + '.json';
                var radio = fileTable.querySelector('input[type="radio"]');
                radio.checked = true;
                hideAllRadioButtonsExceptChecked();
                model = fileTable.querySelector('tr:nth-child(2) td:nth-child(2)').textContent.trim();
                summary = fileTable.querySelector('tr:nth-child(2) td:nth-child(3)').textContent.trim();
                lat_min = fileTable.querySelector('tr:nth-child(2) td:nth-child(4)').textContent.trim();
                lat_max = fileTable.querySelector('tr:nth-child(2) td:nth-child(5)').textContent.trim();
                lon_min = fileTable.querySelector('tr:nth-child(2) td:nth-child(6)').textContent.trim();
                lon_max = fileTable.querySelector('tr:nth-child(2) td:nth-child(7)').textContent.trim();
                filename = fileTable.querySelector('tr:nth-child(2) td:nth-child(8)').textContent.trim();
                mmodelname.innerHTML = model;
                //cmodelname.innerHTML = model;
                // Bounding box coordinates
                var southwest = L.latLng(lat_min, lon_min),
                    northeast = L.latLng(lat_max, lon_max),
                    bounds = L.latLngBounds(southwest, northeast);

                cmodelname.innerHTML = model;

                updateBoundingBox(lat_min, lon_min, lat_max, lon_max);
                // Fetch and display the content of the first file
                fetch(firstFilePath)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(jsonData => {
                        // Display JSON content in the panel
                        //jsonContent.innerHTML = JSON.stringify(jsonData, null, 2);
                        jsonContent.innerHTML = createHtmlFromJson(jsonData);

                    })
                    .catch(error => {
                        console.error('There was a problem with the fetch operation:', error);
                    });
                // Attach event listener to table rows
                fileTable.addEventListener('click', function (event) {
                    var target = event.target;
                    if (target.tagName === 'TD' && target.parentNode.cells[1] === target) {
                        model = target.parentNode.cells[1].textContent;
                        summary = target.parentNode.cells[2].textContent;
                        lat_min = target.parentNode.cells[3].textContent;
                        lat_max = target.parentNode.cells[4].textContent;
                        lon_min = target.parentNode.cells[5].textContent;
                        lon_max = target.parentNode.cells[6].textContent;
                        filename = target.parentNode.cells[7].textContent;
                        var fileName = target.textContent.trim();

                        var filePath = '../static/json/' + filename + '.json';
                        var radio = target.parentNode.cells[0].querySelector('input[type="radio"]');
                        radio.checked = true;
                        hideAllRadioButtonsExceptChecked();
                        cmodelname.innerHTML = model;
                        mmodelname.innerHTML = model;
                        fetch(filePath)
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.json();
                            })
                            .then(jsonData => {
                                // Display JSON content in the panel
                                jsonContent.innerHTML = createHtmlFromJson(jsonData);
                            })
                            .catch(error => {
                                console.error('There was a problem with the fetch operation:', error);
                            });

                        // Bounding box coordinates
                        var southwest = L.latLng(lat_min, lon_min),
                            northeast = L.latLng(lat_max, lon_max),
                            bounds = L.latLngBounds(southwest, northeast);

                        updateBoundingBox(lat_min, lon_min, lat_max, lon_max);

                    }
                });
            })
            .catch(error => console.error('Error fetching file list:', error));

    }

    // Call the function when the page loads
    window.addEventListener('load', loadFileListAndJSON);
</script>

{%endblock%}